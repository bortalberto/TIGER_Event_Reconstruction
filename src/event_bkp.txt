#include "event.h"

const bool save_TP             = true ;
const bool at_least_two_roc    = false;
const bool test_chip_channel   = false;
const bool test_ROC_efficiency = true;
const bool DEBUG               = false;

const int  MAX_SIZE   = 500;
const int  N_TIGER    =  88;
const int  MAX_EVENT  = 1000000;
const int  TP_CHANNEL =   1;

int trigg_channel = 20;
//if(run>=118) trigg_channel=62;

//In file variables
int dchannel, dgemroc, dFEB, dcount, dtimestamp, dstrip_x, dstrip_v, dl1ts_min_tcoarse, dlasttigerframenum, dchip, dFEB_label, drunNo, dlayer, dtrigg_flag;
float dcharge_SH, dpos_phi, dtcoarse, decoarse, dtfine, define, dttrigg, dtrigg_tcoarse, dconstant, dslope, dqmax, dtime, dradius, ddelta_coarse; 

//TP test
int TP_count[N_TIGER][TP_CHANNEL];
int TP_value[N_TIGER][TP_CHANNEL];
int TP_diff [N_TIGER][TP_CHANNEL];

TTree *otree;

int count_unique(std::vector<int> v){
    std::sort(v.begin(), v.end());
    auto last = std::unique(v.begin(), v.end());
    v.erase(last, v.end());
    return v.size();
}

int count_diff(std::vector<int> v){
    std::sort(v.begin(), v.end());
    auto last = std::unique(v.begin(), v.end());
    v.erase(last, v.end());

    return fabs(v.back() - v.front());
}

int moda(vector<int> v){

  //for(int i=0;i<v.size();i++) cout<<v[i]<<endl;
  int mode =-1;
  int count = 1;
  for(int j=0;j<v.size();j++){
    int number=v[j];
    for (int i = 1, countMode = 1; i < v.size(); ++i) {
      if (v[i] == number)
        ++countMode;
      if (countMode > count) {
        count = countMode;
        mode = number;
      }
    }
  }
  //cout<<"mode: "<<mode<<endl;                                                                                                                                                                                            
  return mode;
}


void event(int run, int subrun){
  std::string iname=ANADIR;
  iname=iname+std::to_string(run)+"/Sub_RUN_ana_"  +std::to_string(subrun)+".root";
  std::string oname=ANADIR;
  oname=oname+std::to_string(run)+"/Sub_RUN_event_"+std::to_string(subrun)+".root";
  //cout << "************* RUN " << run << endl;
  //cout << "************* TRIGGER CHANNEL " << trigg_channel << endl;
  if(run >= 118) trigg_channel = 62;
  //cout << "************* post TRIGGER CHANNEL " << trigg_channel << endl;

  bool toohits = false;
    auto file = new TFile(iname.c_str());
    auto tree = (TTree*)file->Get("tree");

    int dchannel, dgemroc, dFEB, dcount, dtimestamp, dstrip_x, dstrip_v, dl1ts_min_tcoarse, dlasttigerframenum, dchip, dFEB_label, drunNo, dlayer, dtrigg_flag;
    float dcharge_SH, dpos_phi, dtcoarse, decoarse, dtfine, define, dttrigg, dtrigg_tcoarse, dconstant, dslope, dqmax, dtime, dradius, ddelta_coarse; 

    tree->SetBranchAddress("runNo",&drunNo);
    tree->SetBranchAddress("layer",&dlayer);
    tree->SetBranchAddress("channel",&dchannel);
    tree->SetBranchAddress("gemroc",&dgemroc);
    tree->SetBranchAddress("FEB",&dFEB);
    tree->SetBranchAddress("charge_SH",&dcharge_SH);
    tree->SetBranchAddress("count",&dcount);
    tree->SetBranchAddress("timestamp",&dtimestamp);
    tree->SetBranchAddress("pos_phi",&dpos_phi);
    tree->SetBranchAddress("radius",&dradius);
    tree->SetBranchAddress("strip_v",&dstrip_v);
    tree->SetBranchAddress("strip_x",&dstrip_x);
    tree->SetBranchAddress("tcoarse",&dtcoarse);
    tree->SetBranchAddress("ecoarse",&decoarse);
    tree->SetBranchAddress("tfine",&dtfine);
    tree->SetBranchAddress("efine",&define);
    tree->SetBranchAddress("l1ts_min_tcoarse",&dl1ts_min_tcoarse);
    tree->SetBranchAddress("trigg_tcoarse",&dtrigg_tcoarse);
    tree->SetBranchAddress("lasttigerframenum",&dlasttigerframenum);
    tree->SetBranchAddress("chip",&dchip);
    tree->SetBranchAddress("FEB_label",&dFEB_label);
    tree->SetBranchAddress("QDCcali_constant",&dconstant);
    tree->SetBranchAddress("QDCcali_slope",&dslope);
    tree->SetBranchAddress("QDCcali_qmax",&dqmax);
    tree->SetBranchAddress("time",&dtime);
    tree->SetBranchAddress("trigg_flag",&dtrigg_flag);
    tree->SetBranchAddress("delta_coarse",&ddelta_coarse);

    
    std::multimap<int,int> mevt;

    for (int i = 0; i < tree->GetEntries(); i++) {
	tree->GetEntry(i);
	mevt.insert(std::pair<int,int>(dcount,i));
    }
    
    
    if(test_chip_channel){
      //Channel analysis
      int max_channel = 64;
      int max_chip = 45;
      TCanvas *c1 = new TCanvas("c1","c1",800,600);
      TH2I *channel_chip = new TH2I ("channel_chip","channel_chip",max_channel,0,max_channel,max_chip,0,max_chip);
      int mean =999999;
      int std = 999999;
      int count_cut = 0;
      int count_post = 0;
      double mean_post = 0;
      double std_post = 0;
      int bad_channel[max_chip][max_channel];
      int n_bad_channel[max_chip];
      int n_std=3; // it was 3
      float charge_min = 2.5;
      bool first_time=true;
      TCut bad_ch = "";
      TCut charge_cut = Form("charge_SH> %f && charge_SH<20 && channel!= %d && strip_x>0",charge_min,trigg_channel);
      for(int i=0;i<max_chip;i++) n_bad_channel[i]=0;
      tree->Draw("FEB_label*2+chip-1:channel>>channel_chip",charge_cut,"zcol");
      c1->SaveAs("channel_chip.pdf(","pdf");    
      while(1){
	//cout<<"hello"<<endl;
	for(int i=0;i<max_channel;i++){
	  for(int j=0;j<max_chip;j++){
	    int tmp = channel_chip->GetBinContent(i+1,j+1);
	  //cout<<i<<" "<<j<<" "<<tmp<<endl;
	    if(tmp>mean+n_std*std) {
	      //cout<<tmp<<" "<<mean+std<<" "<<i<<" "<<j<<endl;
	      channel_chip->SetBinContent(i+1,j+1,0);
	      cout<<"Removed chip "<<j<<" channel "<<i<<endl;
	      bad_channel[j][n_bad_channel[j]]=i;
	      n_bad_channel[j]++;
	      //bad_ch += Form("(FEB_label+chip-1!=%i)||(FEB_label+chip-1==%i&&channel!=%i)",j,j,i);
	      //cout<<bad_ch<<endl;
	      count_cut++;
	    }
	    if(tmp && tmp<mean+n_std*std){
	      mean_post+=tmp;
	      count_post++;
	    }   
	  }
	}
	mean_post/=count_post;
	for(int i=0;i<max_channel;i++){
	  for(int j=0;j<max_chip;j++){
	  int tmp = channel_chip->GetBinContent(i+1,j+1);
	  //cout<<i<<" "<<j<<" "<<tmp<<endl;
	  if(tmp>0 && tmp<mean+n_std*std) {
	    std_post+=pow(mean_post-tmp,2);
	  }   
	  }
	}
	std_post/=count_post;
	std_post=sqrt(std_post);
	//cout<<count_cut<<endl;
	cout<<count_post<<" "<<mean_post<<" "<<std_post<<endl;
	if(!count_cut && !first_time) break;
	first_time=false;
	count_cut=0;
	mean=mean_post;
	std=std_post;
	count_post=0;
	mean_post=0;
	std_post=0;
      }
      
      
      for(int j=0;j<max_chip;j++){
	cout<<"chip "<<j<<" n_bad_ch "<<n_bad_channel[j]<<endl;
	if(!n_bad_channel[j]) continue;
	TString tmp_cut = Form("(FEB_label+chip-1!=%i)||(FEB_label+chip-1==%i",j,j);
	for(int i=0;i<n_bad_channel[j];i++) tmp_cut +=Form("&&channel!=%i",bad_channel[j][i]);
	tmp_cut +=")";
	bad_ch += tmp_cut;
      }
      
      
      TH1D *h = new TH1D ("h","h",100,0,20);
      c1->SaveAs("channel_chip.pdf","pdf");
      //cout<<charge_cut<<" "<<charge_min<<endl;
      tree->Draw("charge_SH>>h",charge_cut);
      cout<<"Mean charge beofre cut: "<<h->GetMean()<<endl;
      c1->SaveAs("channel_chip.pdf","pdf");
      charge_cut += bad_ch;
      //cout<<charge_cut<<endl;
      tree->Draw("charge_SH>>h",charge_cut);
      cout<<"Mean charge after cut: "<<h->GetMean()<<endl;
      c1->SaveAs("channel_chip.pdf)","pdf");
    }
    //return;



    auto ofile = new TFile(oname.c_str(),"RECREATE");
    otree = new TTree("tree","tree");

    int evtNo, nhits, ngemrocs, ntimestamp, runNo, ntcoarse_L1_TP, ntcoarse_L2_TP;
    float trigg_tcoarse;

    std::vector<int> tcount, tchannel, tgemroc, tFEB, ttimestamp, tstrip_x, tstrip_v, tl1ts_min_tcoarse, tchip, tFEB_label, tquality, tlayer;
    std::vector<float> tcharge_SH, tpos_phi, ttcoarse, tecoarse, ttfine, tefine, t_min_ttrigg, tconstant, tslope, tqmax, ttime, tradius, ttrigg, delta_coarse;

    if(DEBUG) std::cout << "DEBUG::Just created all the vector variable" << std::endl;

    otree->Branch("runNo",&runNo,"runNo/i"); // the run index
    otree->Branch("evtNo",&evtNo,"evtNo/i"); // the event number index in each run
    otree->Branch("nhits",&nhits,"nhits/i"); // the number of hits in each event
    otree->Branch("ngemrocs",&ngemrocs,"ngemrocs/i"); // the number of gemrocs fired in each event
    otree->Branch("ntimestamp",&ntimestamp,"ntimestamp/i"); // the number of different GEMROC LOCAL_L1_TIMESTAMP values in each event
    otree->Branch("tcoarse_L1_TP_diff",&ntcoarse_L1_TP,"ntcoarse_L1_TP/i"); // the number of different TCOARSEs for test pulse in L1
    otree->Branch("tcoarse_L2_TP_diff",&ntcoarse_L2_TP,"ntcoarse_L2_TP/i"); // the number of different TCOARSEs for test pulse in L2
    otree->Branch("trigg_tcoarse",&trigg_tcoarse,"trigg_tcoarse/f"); // tcoarse value for the trigger channel in each event

    otree->Branch("local_l1_count"    , "vector<int>"  , &tcount           ); 
    otree->Branch("layer"             , "vector<int>"  , &tlayer           ); // Layer No. for each hit
    otree->Branch("channel"           , "vector<int>"  , &tchannel         ); // channel ID for each hit
    otree->Branch("gemroc"            , "vector<int>"  , &tgemroc          ); // GEMROC ID for each hit
    otree->Branch("FEB_SW"            , "vector<int>"  , &tFEB             ); // FEB ID for each hit
    otree->Branch("local_l1_timestamp", "vector<int>"  , &ttimestamp       ); // GEMROC LOCAL_L1_TIMESTAMP for each hit
    otree->Branch("strip_v"           , "vector<int>"  , &tstrip_v         ); // strip V number of each hit
    otree->Branch("strip_x"           , "vector<int>"  , &tstrip_x         ); // strip X number of each hit
    otree->Branch("chip"              , "vector<int>"  , &tchip            ); // FEB chip ID for each hit
    otree->Branch("FEB_label"         , "vector<int>"  , &tFEB_label       ); // FEB label number for each hit
    otree->Branch("l1ts_min_tcoarse"  , "vector<int>"  , &tl1ts_min_tcoarse); // GEMROC LOCAL_L1_TIMESTAMP - tcoarse for each hit
    otree->Branch("quality"           , "vector<int>"  , &tquality         ); // tags of good event for each hit
    otree->Branch("charge_SH"         , "vector<float>", &tcharge_SH       ); // charge in S&H mode, with QDC calibration, for each hit
    otree->Branch("radius"            , "vector<float>", &tradius          ); // radius for each hit, L1: 90.223 mm; L2: 129.8 mm
    otree->Branch("pos_phi"           , "vector<float>", &tpos_phi         ); // phi positon (strip_x) for each hit
    otree->Branch("tcoarse"           , "vector<float>", &ttcoarse         ); // tcoarse value for each hit
    otree->Branch("ecoarse"           , "vector<float>", &tecoarse         ); // ecoarse value for each hit
    otree->Branch("tfine"             , "vector<float>", &ttfine           ); // tfine value for each hit
    otree->Branch("efine"             , "vector<float>", &tefine           ); // efine value for each hit
    otree->Branch("ttrigg"            , "vector<float>", &ttrigg           ); // tcoarse of each trigger channel 
    otree->Branch("t_min_ttrigg"      , "vector<float>", &t_min_ttrigg     ); // tcoarse of each hit - tcoarse from trigger channel in each event
    otree->Branch("QDCcali_constant"  , "vector<float>", &tconstant        ); // constant value from DQC calibration curve for each hit
    otree->Branch("QDCcali_slope"     , "vector<float>", &tslope           ); // slope value from DQC calibration curve for each hit
    otree->Branch("QDCcali_qmax"      , "vector<float>", &tqmax            ); // Q max value from DQC calibration curve for each hit
    otree->Branch("time"              , "vector<float>", &ttime            );
    otree->Branch("delta_coarse"      , "vector<float>", &delta_coarse     );

    if(DEBUG) std::cout << "DEBUG::Just Saved all the vector branches" << std::endl;

    otree->Branch("TP_count", &TP_count, "TP_count[88][5]/I");
    otree->Branch("TP_value", &TP_value, "TP_value[88][5]/I");
    otree->Branch("TP_diff" , &TP_diff , "TP_diff[88][5]/I" );

    std::multimap<int, int>::iterator it = mevt.begin();
    int itcount = it->first;
    nhits = 0;
    evtNo = 0;
    ngemrocs = 0;
    runNo = 0;
    std::vector<int> vgemrocs;
    std::vector<int> vtimestamp;
    std::vector<float> vttrigg;
    std::vector<int> vlasttigerframenum;
    std::vector<int> vtrigg_gemroc;

    std::vector<int> vtcoarse_L1_TP;
    std::vector<int> vtcoarse_L2_TP;
    for(int i=0; i<N_TIGER;i++) {
      for(int j=0; j<TP_CHANNEL;j++) {
      TP_count[i][j]=0;
      }
    }
    cout<<"Number of entries: "<<tree->GetEntries()<<endl;
    for (std::pair<int, int> elem : mevt){
      //if(elem.second==0&&evtNo>2) break; COMMENTED
      toohits=false;
      if(itcount==elem.first||nhits==0){ //an event collects all hits which have a same GEMROC LOCAL_COUNT number
	//	if(toohits)continue;
	
	itcount = elem.first;
	tree->GetEntry(elem.second);
	  if(!runNo) runNo = drunNo;
	  
	  //	  ttrigg[nhits] = -999;
	  if(dtrigg_flag){ // trigger channgel
	    trigg_tcoarse = dtrigg_tcoarse;
	    vttrigg.push_back(dtrigg_tcoarse);
	    vtrigg_gemroc.push_back(dgemroc);
	    vlasttigerframenum.push_back(dlasttigerframenum);
	    ttrigg.push_back(dtrigg_tcoarse);
	    
	  }
	  else ttrigg.push_back(-999);

	  //if(dcharge_SH<0) continue;
	  //if(dlayer==2&&dchannel>60) continue; // channel 61,62,63 for L2 are not used!
	  //if(dstrip_v==-1&&dstrip_x==-1) continue; // some stripID are not properly setted at the present !!!
	  
	  //                                                                                                                                                                                                              
	  //TEST ON TP
	  
	  TP_fill(dchannel, dFEB_label, dchip, dtcoarse);
	  
	  //check test pulse                                                                                                                                                                                              
	  if(dlayer==1){
	    //if(dchannel<36&&dchannel%7==0) vtcoarse_L1_TP.push_back(dtcoarse);                                                                                                                                        
	    if(dchannel==trigg_channel) vtcoarse_L1_TP.push_back(dtcoarse);
	  }
	  if(dlayer==2){
	    //if(dchannel==20) vtcoarse_L2_TP.push_back(dtcoarse);                                                                                                                                                      
	    if(dchannel==trigg_channel) vtcoarse_L2_TP.push_back(dtcoarse);
	  }
	  
	  vgemrocs.push_back(dgemroc);
	  vtimestamp.push_back(dtimestamp);
	  
	  //To speed up the code the TP is not saved
	  if(!save_TP && dchannel == trigg_channel) continue;
	  
	  //Check if there are BAD event due to ROC problem --> S/H only !!!
	  if(ddelta_coarse!=22 && ddelta_coarse!=21) continue;
	  
	  if(DEBUG) std::cout << "DEBUG::Going to push_back" << std::endl;
	  
	  tcount           .push_back(dcount           );
          tlayer           .push_back(dlayer           );
	  tchannel         .push_back(dchannel         );
	  tgemroc          .push_back(dgemroc          );
	  tFEB             .push_back(dFEB             ); 
	  ttimestamp       .push_back(dtimestamp       );
          tcharge_SH       .push_back(dcharge_SH       );
          tpos_phi         .push_back(dpos_phi         );
          tradius          .push_back(dradius          );
          tstrip_x         .push_back(dstrip_x         );
          tstrip_v         .push_back(dstrip_v         );
          ttcoarse         .push_back(dtcoarse         );
          tecoarse         .push_back(decoarse         );
          ttfine           .push_back(dtfine           );
          tchip            .push_back(dchip            );
          tFEB_label       .push_back(dFEB_label       );
          tefine           .push_back(define           );
          tl1ts_min_tcoarse.push_back(dl1ts_min_tcoarse);
          tconstant        .push_back(dconstant        );
          tslope           .push_back(dslope           );
          tqmax            .push_back(dqmax            );
          tquality         .push_back(0                );
	  ttime            .push_back(dtime            ); 
	  delta_coarse     .push_back(ddelta_coarse    );

	  if(DEBUG) std::cout << "DEBUG::Finished to push_back" << std::endl;
	  
	  ////tag tquality
	  //if(dFEB_label==10&&dchip==2) tquality[nhits] = 1;
	  //if(dFEB_label==13&&dchip==1) tquality[nhits] = 1;
	  //if(dFEB_label==14) tquality[nhits] = 1;
	  //if(dFEB_label==3&&dchip==1) tquality[nhits] = 1;
	  //if(dFEB_label==0&&dchip==1) tquality[nhits] = 1;
	  ////the above tagging only avabile for Ferrara data on Nov. 2018
	  
	  nhits++;
	  //	  if(nhits>MAX_SIZE && DEBUG) {std::cout<<"the number of hits is out of ARRAY range"<<std::endl; nhits=0; toohits=true; continue;}
      }
      else{
	ngemrocs = count_unique(vgemrocs);
	ntimestamp = count_unique(vtimestamp);
	
	if(!vtcoarse_L1_TP.empty()) ntcoarse_L1_TP = count_diff(vtcoarse_L1_TP);
	else ntcoarse_L1_TP = 9999;
	
	if(!vtcoarse_L2_TP.empty()) ntcoarse_L2_TP = count_diff(vtcoarse_L2_TP);
	else ntcoarse_L2_TP = 9999;
	
	if(at_least_two_roc && (ngemrocs<2 || nhits<2)){ //at least two gemrocs should be fired with two hits
	  nhits = 0;
	  vgemrocs.clear();
	  vtimestamp.clear();
	  vttrigg.clear();
	  vtcoarse_L1_TP.clear();
	  vtcoarse_L2_TP.clear();
	  for(int i=0; i<N_TIGER;i++) {
	    for(int j=0; j<TP_CHANNEL;j++) {
	      TP_count[i][j]=0;
	    }
	  }
	  continue;
	}
	else{
	  int good = 0;
	  //for(int i=1; i<nhits; i++){
	  //  if(sin(tpos_phi[0])*sin(tpos_phi[i])<0) good++; //require one hit with negtive pos_phi, anther one with postive pos_phi
	  //}
	  for(int i=0; i<nhits; i++){
	    good++; //no pos_phi requirement
	  }
	  if(good==0){
	    nhits = 0;
	    trigg_tcoarse = -9999;
	    vgemrocs.clear();
	    vtimestamp.clear();
	    vttrigg.clear();

	    for(int i=0; i<N_TIGER;i++) {
	      for(int j=0; j<TP_CHANNEL;j++) {
		TP_count[i][j]=0;
	      }
	    }
	    continue;
	  }
	  
	  //for(int i=0; i<vttrigg.size(); i++){
	  //    cout<<vtrigg_gemroc[i]<<"\t";
	  //}
	  //cout<<""<<endl;
	  //for(int i=0; i<vttrigg.size(); i++){
	  //    cout<<vttrigg[i]<<"\t";
	  //}
	  //cout<<""<<endl;
	  //cout<<""<<endl;
	  
	  
	  for(int i=0; i<nhits; i++){
	    //if(tstrip_x[i]<0){ 
	    //    t_min_ttrigg[i]=-9999; 
	    //    continue;
	    //}
	    //if(vttrigg.size()<1) vttrigg.push_back(-99);
	    if(tlayer.at(i)==1){
	      //if(ntcoarse_L1_TP>3) t_min_ttrigg.push_back(-9999);
	      //else t_min_ttrigg.push_back(TMath::Abs(ttcoarse.at(i)) - TMath::Abs(vtcoarse_L1_TP[0]));
	      int TP_L1 = moda(vtcoarse_L1_TP);
	      t_min_ttrigg.push_back(ttcoarse.at(i) - TP_L1);
	    }
	    if(tlayer.at(i)==2){
	      //if(ntcoarse_L2_TP>3) t_min_ttrigg.push_back(-9999);
	      //else t_min_ttrigg.push_back(TMath::Abs(ttcoarse.at(i)) - TMath::Abs(vtcoarse_L2_TP[0]));
	      int TP_L2 = moda(vtcoarse_L2_TP);
	      t_min_ttrigg.push_back(ttcoarse.at(i) - TP_L2);
	    } //if there are two trigger time in one event, only the first one is used here.
	    //cout<<ttcoarse[i]<<" "<<ttfine[i]<<endl;
	  }
	} 
	TP_test();    
	evtNo++;
	otree->Fill();

	if(evtNo%100==0) std::cout << "Evt. No.\t" << evtNo << " \t & nHits\t" << nhits << std::endl;

	for(int i=0; i<N_TIGER;i++) {
	  for(int j=0; j<TP_CHANNEL;j++) {
	    TP_count[i][j]=0;
	  }
	}

	nhits=0;
	trigg_tcoarse = -9999;

	vgemrocs         .clear();
	vtimestamp       .clear();
	vttrigg          .clear();
	vtcoarse_L1_TP   .clear();
	vtcoarse_L2_TP   .clear();
	
	tcount           .clear();
	tlayer           .clear();
	tchannel         .clear();
	tgemroc          .clear();
	tFEB             .clear();
	ttimestamp       .clear();
	tstrip_v         .clear();
	tstrip_x         .clear();
	tchip            .clear();
	tFEB_label       .clear();
	tl1ts_min_tcoarse.clear();
	tquality         .clear();
	tcharge_SH       .clear();
	tradius          .clear();
	tpos_phi         .clear();
	ttcoarse         .clear();
	tecoarse         .clear();
	ttfine           .clear();
	tefine           .clear();
	ttrigg           .clear();
	t_min_ttrigg     .clear();
	tconstant        .clear();
	tslope           .clear();
	tqmax            .clear();
	ttime            .clear();
	delta_coarse     .clear();

	if(evtNo >= MAX_EVENT) {
	  std::cout << "***** ATTENTION THE MAXIMUM NUMBER OF EVENTS HAS BEEN REACHED, GOING TO END THE RUN. *****" << std::endl;
	  std::cout << "***** \t MAX_EVENT \t" << MAX_EVENT << " \t *****"                                          << std::endl;
	  break;
	}
      }
    }
    if(test_ROC_efficiency)TP_cout();    
    otree->Write();
    file->Close();
    ofile->Close();
}


void TP_fill(int ch, int feb, int ip, double t){

  int TIGER_ID = 2*feb;
  if(ip==2) TIGER_ID++;
  if(TIGER_ID<0 || TIGER_ID>N_TIGER){
    cout<<"Error in the TP test with TIGER ID: "<<TIGER_ID<<endl;
    return;
  }
  for(int chID=0; chID < TP_CHANNEL; chID++) {
    if(ch == trigg_channel) {
      TP_count[TIGER_ID][chID]++;
      TP_value[TIGER_ID][chID]=t;
      if(DEBUG) std::cout << "chID \t" << ch << "\t TIGER_ID \t" << TIGER_ID << "\t TP_COUNT \t" << TP_count[TIGER_ID] << "\t TP_value \t" << TP_value[TIGER_ID] << std::endl;
    }
  }
}

void TP_test(){

  for(int chID=0; chID < TP_CHANNEL; chID++) {
    
    if(TP_count[0][chID]!=0) {
      for(int i=0;i<32;i++){
	TP_diff[i][chID]=TP_value[i][chID]-TP_value[0][chID];
      }
    }
    else {
      for(int i=0;i<32;i++){
	TP_diff[i][chID]=-999;
      }
    }
    if(TP_count[32][chID]!=0) {
      for(int i=32;i<N_TIGER;i++){
	TP_diff[i][chID]=TP_value[i][chID]-TP_value[32][chID];
      }
    }
    else {
      for(int i=32;i<N_TIGER;i++){
	TP_diff[i][chID]=-999;
      }
    }

  } // for TP_CHANNEL loop
}

void TP_cout(){

  TString cut;
  TString cot;
  TString baseT;
  bool NOch[TP_CHANNEL]; for(int chID=0; chID < TP_CHANNEL; chID++) NOch[TP_CHANNEL] = false;

  double eff_T[N_TIGER][TP_CHANNEL], eff[N_TIGER][TP_CHANNEL], eff_Tot_T[N_TIGER], eff_Tot[N_TIGER];
  
  for(int chID=0; chID < TP_CHANNEL; chID++) {  
    for(int i=0;i<32;i++){
      cut   = Form("TP_diff[%d][%d]==0 &&TP_count[0][%d]" , i, chID, chID);
      cot   = Form("TP_count[%d][%d]!=0", i, chID);
      baseT = Form("TP_count[0][%d]"       , chID);

      eff_T[i][chID] = (double)(otree->GetEntries(cut))/(double)(otree->GetEntries(baseT));
      eff[i][chID]   = (double)(otree->GetEntries(cot))/(double)(otree->GetEntries(""));
      if(otree->GetEntries(baseT) == 0) NOch[chID] = true;

      if(DEBUG) {
	std::cout << "TIGER \t" << i << " " << otree->GetEntries(cut) << " " << otree->GetEntries("TP_count[0]") << std::endl;
	std::cout << "TIGER \t" << i << " " << otree->GetEntries(cot) << " " << otree->GetEntries("")            << std::endl;
        std::cout << "channel \t" << (chID+1)*5 << " & TIGER \t" << i << ": in time \t" << ((double)(otree->GetEntries(cut))/(double)(otree->GetEntries(baseT)))*100. << "% \t and efficiency \t" << ((double)(otree->GetEntries(cot))/(double)(otree->GetEntries("")))*100. << "%" << std::endl;
      }
    }
    for(int i=32;i<N_TIGER;i++){
      cut   = Form("TP_diff[%d][%d]==0 && TP_count[0][%d]" , i, chID,chID);
      cot   = Form("TP_count[%d][%d]!=0", i, chID);
      baseT = Form("TP_count[32][%d]"      , chID);

      eff_T[i][chID] = (double)(otree->GetEntries(cut))/(double)(otree->GetEntries(baseT));
      eff[i][chID]   = (double)(otree->GetEntries(cot))/(double)(otree->GetEntries(""));
      
      //if(DEBUG) {
	std::cout << "TIGER \t" << i << " " << otree->GetEntries(cut) << " " << otree->GetEntries("TP_count[32]") << std::endl;
	std::cout << "TIGER \t" << i << " " << otree->GetEntries(cot) << " " << otree->GetEntries("")             << std::endl;
	std::cout << "channel \t" << (chID+1)*5  << " & TIGER \t" << i << ": in time \t" << ((double)(otree->GetEntries(cut))/(double)(otree->GetEntries(baseT)))*100. << "% \t and efficiency \t" << ((double)(otree->GetEntries(cot))/(double)(otree->GetEntries("")))*100. << "%" << std::endl;
	//}
    }
    std::cout << "\n" << std::endl;
  }
  /*  
  for(int i=0;i<N_TIGER;i++){
    eff_Tot_T[i] = 1.;
    eff_Tot[i]   = 1.;
    for(int chID=0; chID < TP_CHANNEL; chID++) {
      if(NOch[chID]) continue;
      eff_Tot_T[i] *= eff_T[i][chID];
      eff_Tot[i]   *= eff[i][chID]  ;
    }
      std::cout << "TIGER \t" << i << ": in time \t" << eff_Tot_T[i]*100. << "% \t and efficiency \t" << eff_Tot[i]*100. << "%" << std::endl;
    }
  */
  return;
}
